{
  "version": 3,
  "sources": ["../../../../../../node_modules/@amcharts/amcharts5/.internal/core/render/gradients/Gradient.js", "../../../../../../node_modules/@amcharts/amcharts5/.internal/core/render/gradients/LinearGradient.js", "../../../../../../node_modules/@amcharts/amcharts5/.internal/core/render/Slice.js", "../../../../../../node_modules/@amcharts/amcharts5/.internal/core/render/Circle.js"],
  "sourcesContent": ["import { Entity } from \"../../util/Entity\";\n/**\r\n * Base class for gradients.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/gradients/} for more info\r\n */\nexport class Gradient extends Entity {\n  _afterNew() {\n    // Applying themes because gradient will not have parent\n    super._afterNewApplyThemes();\n  }\n  /**\r\n   * @ignore\r\n   */\n  getFill(_target) {\n    return {\n      addColorStop: (_offset, _color) => {}\n    };\n  }\n  _changed() {\n    super._changed();\n    //if (this.isDirty(\"target\") && this.get(\"target\")) {\n    //\tthis.get(\"target\")!.events.on(\"boundschanged\", () => {\n    //\t});\n    //}\n  }\n  /**\r\n   * @ignore\r\n   */\n  getBounds(target) {\n    const gradientTarget = this.get(\"target\");\n    if (gradientTarget) {\n      let bounds = gradientTarget.globalBounds();\n      const p0 = target.toLocal({\n        x: bounds.left,\n        y: bounds.top\n      });\n      const p1 = target.toLocal({\n        x: bounds.right,\n        y: bounds.top\n      });\n      const p2 = target.toLocal({\n        x: bounds.right,\n        y: bounds.bottom\n      });\n      const p3 = target.toLocal({\n        x: bounds.left,\n        y: bounds.bottom\n      });\n      return {\n        left: Math.min(p0.x, p1.x, p2.x, p3.x),\n        top: Math.min(p0.y, p1.y, p2.y, p3.y),\n        right: Math.max(p0.x, p1.x, p2.x, p3.x),\n        bottom: Math.max(p0.y, p1.y, p2.y, p3.y)\n      };\n    }\n    return target._display.getLocalBounds();\n  }\n}\nObject.defineProperty(Gradient, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"Gradient\"\n});\nObject.defineProperty(Gradient, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: Entity.classNames.concat([Gradient.className])\n});\n", "import { Gradient } from \"./Gradient\";\nimport { Color } from \"../../util/Color\";\nimport * as $array from \"../../util/Array\";\nimport * as $type from \"../../util/Type\";\nimport * as $math from \"../../util/Math\";\n/**\r\n * Linear gradient.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/gradients/} for more info\r\n */\nexport class LinearGradient extends Gradient {\n  /**\r\n   * @ignore\r\n   */\n  getFill(target) {\n    const rotation = this.get(\"rotation\", 0);\n    let bounds = this.getBounds(target);\n    let l = bounds.left || 0;\n    let r = bounds.right || 0;\n    let t = bounds.top || 0;\n    let b = bounds.bottom || 0;\n    let cos = $math.cos(rotation);\n    let sin = $math.sin(rotation);\n    let w = cos * (r - l);\n    let h = sin * (b - t);\n    if (w == 0) {\n      w = 1;\n    }\n    if (h == 0) {\n      h = 1;\n    }\n    let longer = Math.max(w, h);\n    const gradient = this._root._renderer.createLinearGradient(l, t, l + longer * cos, t + longer * sin);\n    const stops = this.get(\"stops\");\n    if (stops) {\n      let i = 0;\n      $array.each(stops, stop => {\n        let offset = stop.offset;\n        if (!$type.isNumber(offset)) {\n          offset = i / (stops.length - 1);\n        }\n        let opacity = stop.opacity;\n        if (!$type.isNumber(opacity)) {\n          opacity = 1;\n        }\n        let color = stop.color;\n        if (color) {\n          const lighten = stop.lighten;\n          if (lighten) {\n            color = Color.lighten(color, lighten);\n          }\n          const brighten = stop.brighten;\n          if (brighten) {\n            color = Color.brighten(color, brighten);\n          }\n          gradient.addColorStop(offset, 'rgba(' + color.r + ',' + color.g + ',' + color.b + ',' + opacity + ')');\n        }\n        i++;\n      });\n    }\n    return gradient;\n  }\n}\nObject.defineProperty(LinearGradient, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"LinearGradient\"\n});\nObject.defineProperty(LinearGradient, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: Gradient.classNames.concat([LinearGradient.className])\n});\n", "import { Graphics } from \"./Graphics\";\nimport * as $type from \"../util/Type\";\nimport { Percent } from \"../util/Percent\";\nimport { arc } from \"d3-shape\";\nimport * as $math from \"../util/Math\";\n/**\r\n * Draws a slice shape.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\r\n */\nexport class Slice extends Graphics {\n  constructor() {\n    super(...arguments);\n    /**\r\n     * @ignore\r\n     */\n    Object.defineProperty(this, \"ix\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    /**\r\n     * @ignore\r\n     */\n    Object.defineProperty(this, \"iy\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_generator\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: arc()\n    });\n  }\n  _getTooltipPoint() {\n    let tooltipX = this.get(\"tooltipX\");\n    let tooltipY = this.get(\"tooltipY\");\n    let x = 0;\n    let y = 0;\n    if ($type.isNumber(tooltipX)) {\n      x = tooltipX;\n    }\n    if ($type.isNumber(tooltipY)) {\n      y = tooltipY;\n    }\n    let radius = this.get(\"radius\", 0);\n    let innerRadius = this.get(\"innerRadius\", 0);\n    let dRadius = this.get(\"dRadius\", 0);\n    let dInnerRadius = this.get(\"dInnerRadius\", 0);\n    radius += dRadius;\n    innerRadius += dInnerRadius;\n    if (innerRadius < 0) {\n      innerRadius = radius + innerRadius;\n    }\n    if (tooltipX instanceof Percent) {\n      x = this.ix * (innerRadius + (radius - innerRadius) * tooltipX.value);\n    }\n    if (tooltipY instanceof Percent) {\n      y = this.iy * (innerRadius + (radius - innerRadius) * tooltipY.value);\n    }\n    if (this.get(\"arc\") >= 360 && innerRadius == 0) {\n      x = 0;\n      y = 0;\n    }\n    return {\n      x,\n      y\n    };\n  }\n  _beforeChanged() {\n    super._beforeChanged();\n    if (this.isDirty(\"radius\") || this.isDirty(\"arc\") || this.isDirty(\"innerRadius\") || this.isDirty(\"startAngle\") || this.isDirty(\"dRadius\") || this.isDirty(\"dInnerRadius\") || this.isDirty(\"cornerRadius\") || this.isDirty(\"shiftRadius\")) {\n      this._clear = true;\n    }\n  }\n  _changed() {\n    super._changed();\n    if (this._clear) {\n      let startAngle = this.get(\"startAngle\", 0);\n      let arc = this.get(\"arc\", 0);\n      const generator = this._generator;\n      if (arc < 0) {\n        startAngle = startAngle + arc;\n        arc = arc * -1;\n      }\n      if (arc > 0.1) {\n        // this fixes bug with full circle when arc is very small\n        generator.cornerRadius(this.get(\"cornerRadius\", 0));\n      }\n      generator.context(this._display);\n      let radius = this.get(\"radius\", 0);\n      let innerRadius = this.get(\"innerRadius\", 0);\n      let dRadius = this.get(\"dRadius\", 0);\n      let dInnerRadius = this.get(\"dInnerRadius\", 0);\n      radius += dRadius;\n      innerRadius += dInnerRadius;\n      if (innerRadius < 0) {\n        innerRadius = radius + innerRadius;\n      }\n      generator({\n        innerRadius: innerRadius,\n        outerRadius: radius,\n        startAngle: (startAngle + 90) * $math.RADIANS,\n        endAngle: (startAngle + arc + 90) * $math.RADIANS\n      });\n      let middleAngle = startAngle + arc / 2;\n      this.ix = $math.cos(middleAngle);\n      this.iy = $math.sin(middleAngle);\n      const shiftRadius = this.get(\"shiftRadius\", 0);\n      this.setRaw(\"dx\", this.ix * shiftRadius);\n      this.setRaw(\"dy\", this.iy * shiftRadius);\n      this.markDirtyPosition();\n    }\n  }\n}\nObject.defineProperty(Slice, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"Slice\"\n});\nObject.defineProperty(Slice, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: Graphics.classNames.concat([Slice.className])\n});\n", "import { Graphics } from \"./Graphics\";\n/**\r\n * Draws a circle.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\r\n * @important\r\n */\nexport class Circle extends Graphics {\n  _afterNew() {\n    super._afterNew();\n    this._display.isMeasured = true;\n    this.setPrivateRaw(\"trustBounds\", true);\n  }\n  _beforeChanged() {\n    super._beforeChanged();\n    if (this.isDirty(\"radius\")) {\n      this._clear = true;\n    }\n  }\n  _changed() {\n    super._changed();\n    if (this._clear) {\n      this._display.drawCircle(0, 0, Math.abs(this.get(\"radius\", 10)));\n    }\n  }\n}\nObject.defineProperty(Circle, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"Circle\"\n});\nObject.defineProperty(Circle, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: Graphics.classNames.concat([Circle.className])\n});\n"],
  "mappings": "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",
  "names": ["cos", "sin"]
}
